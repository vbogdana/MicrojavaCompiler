
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Jan 19 06:11:12 CET 2016
//----------------------------------------------------

package compiler;

import java_cup.runtime.*;
import org.apache.log4j.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Jan 19 06:11:12 CET 2016
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\203\000\002\002\010\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\005\004\000\002\005\002\000" +
    "\002\013\004\000\002\013\002\000\002\021\004\000\002" +
    "\021\002\000\002\027\004\000\002\027\002\000\002\006" +
    "\007\000\002\007\005\000\002\007\003\000\002\007\002" +
    "\000\002\010\005\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\012\003\000\002" +
    "\014\006\000\002\015\005\000\002\015\003\000\002\015" +
    "\002\000\002\016\004\000\002\017\003\000\002\017\002" +
    "\000\002\020\004\000\002\106\002\000\002\107\002\000" +
    "\002\110\002\000\002\022\014\000\002\023\003\000\002" +
    "\023\002\000\002\024\004\000\002\025\003\000\002\025" +
    "\002\000\002\026\005\000\002\111\002\000\002\030\014" +
    "\000\002\031\003\000\002\031\003\000\002\032\003\000" +
    "\002\032\002\000\002\033\005\000\002\033\003\000\002" +
    "\034\005\000\002\035\004\000\002\035\002\000\002\036" +
    "\003\000\002\036\003\000\002\040\007\000\002\040\011" +
    "\000\002\040\003\000\002\037\003\000\002\037\011\000" +
    "\002\037\003\000\002\037\003\000\002\037\003\000\002" +
    "\037\003\000\002\037\003\000\002\037\005\000\002\041" +
    "\005\000\002\052\004\000\002\053\004\000\002\053\002" +
    "\000\002\054\004\000\002\054\005\000\002\055\004\000" +
    "\002\055\003\000\002\055\003\000\002\055\005\000\002" +
    "\056\003\000\002\056\002\000\002\057\005\000\002\057" +
    "\003\000\002\060\005\000\002\061\003\000\002\061\002" +
    "\000\002\062\004\000\002\062\002\000\002\063\004\000" +
    "\002\064\005\000\002\064\003\000\002\065\005\000\002" +
    "\065\003\000\002\066\004\000\002\067\003\000\002\067" +
    "\002\000\002\070\004\000\002\043\007\000\002\044\007" +
    "\000\002\045\004\000\002\046\005\000\002\073\003\000" +
    "\002\073\002\000\002\047\007\000\002\050\010\000\002" +
    "\074\004\000\002\074\002\000\002\075\004\000\002\076" +
    "\004\000\002\076\002\000\002\077\004\000\002\100\004" +
    "\000\002\100\003\000\002\100\003\000\002\100\003\000" +
    "\002\100\003\000\002\100\005\000\002\100\005\000\002" +
    "\101\005\000\002\101\002\000\002\102\005\000\002\102" +
    "\002\000\002\103\003\000\002\103\003\000\002\103\003" +
    "\000\002\103\003\000\002\103\003\000\002\103\003\000" +
    "\002\104\003\000\002\104\003\000\002\105\003\000\002" +
    "\105\003\000\002\105\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\310\000\004\004\005\001\002\000\004\002\312\001" +
    "\002\000\004\021\006\001\002\000\012\006\ufffe\010\ufffe" +
    "\021\ufffe\055\ufffe\001\002\000\012\006\017\010\020\021" +
    "\012\055\011\001\002\000\004\021\303\001\002\000\010" +
    "\016\ufff3\021\ufff3\056\ufff3\001\002\000\052\021\uffe9\026" +
    "\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9" +
    "\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9\046" +
    "\uffe9\047\uffe9\052\uffe9\053\uffe9\054\uffe9\055\uffe9\001\002" +
    "\000\012\006\ufffb\010\ufffb\021\ufffb\055\ufffb\001\002\000" +
    "\012\006\ufffc\010\ufffc\021\ufffc\055\ufffc\001\002\000\012" +
    "\006\uffff\010\uffff\021\uffff\055\uffff\001\002\000\012\006" +
    "\ufffd\010\ufffd\021\ufffd\055\ufffd\001\002\000\004\021\uffe0" +
    "\001\002\000\004\021\012\001\002\000\004\021\023\001" +
    "\002\000\010\021\023\046\uffef\047\uffef\001\002\000\004" +
    "\043\024\001\002\000\012\022\027\023\031\024\030\025" +
    "\025\001\002\000\010\021\uffea\046\uffea\047\uffea\001\002" +
    "\000\010\021\uffee\046\uffee\047\uffee\001\002\000\010\021" +
    "\uffed\046\uffed\047\uffed\001\002\000\010\021\uffeb\046\uffeb" +
    "\047\uffeb\001\002\000\010\021\uffec\046\uffec\047\uffec\001" +
    "\002\000\006\046\ufff0\047\ufff0\001\002\000\006\046\035" +
    "\047\034\001\002\000\004\021\023\001\002\000\012\006" +
    "\ufff2\010\ufff2\021\ufff2\055\ufff2\001\002\000\006\046\ufff1" +
    "\047\ufff1\001\002\000\004\021\040\001\002\000\006\020" +
    "\042\055\uffdb\001\002\000\004\055\045\001\002\000\004" +
    "\021\012\001\002\000\004\055\uffdc\001\002\000\004\055" +
    "\uffda\001\002\000\010\021\uffdf\055\uffdf\056\uffdf\001\002" +
    "\000\010\021\ufff7\055\ufff7\056\ufff7\001\002\000\010\021" +
    "\012\055\uffde\056\uffde\001\002\000\006\055\053\056\uffd8" +
    "\001\002\000\010\021\ufff8\055\ufff8\056\ufff8\001\002\000" +
    "\004\056\uffd9\001\002\000\010\016\ufff3\021\ufff3\056\ufff3" +
    "\001\002\000\004\056\055\001\002\000\012\006\uffdd\010" +
    "\uffdd\021\uffdd\055\uffdd\001\002\000\010\016\062\021\012" +
    "\056\060\001\002\000\004\021\uffd4\001\002\000\004\056" +
    "\uffd7\001\002\000\010\016\ufff4\021\ufff4\056\ufff4\001\002" +
    "\000\004\021\uffd3\001\002\000\004\021\064\001\002\000" +
    "\004\051\065\001\002\000\006\021\uffd6\052\uffd6\001\002" +
    "\000\006\021\012\052\uffd1\001\002\000\004\021\273\001" +
    "\002\000\004\052\075\001\002\000\006\047\073\052\uffd2" +
    "\001\002\000\006\047\uffcf\052\uffcf\001\002\000\004\021" +
    "\012\001\002\000\006\047\uffd0\052\uffd0\001\002\000\006" +
    "\021\ufff7\055\ufff7\001\002\000\006\021\012\055\077\001" +
    "\002\000\024\005\uffcc\011\uffcc\013\uffcc\014\uffcc\015\uffcc" +
    "\017\uffcc\021\uffcc\055\uffcc\056\uffcc\001\002\000\024\005" +
    "\114\011\112\013\116\014\102\015\111\017\107\021\103" +
    "\055\113\056\105\001\002\000\012\043\263\044\264\045" +
    "\265\051\266\001\002\000\004\051\256\001\002\000\060" +
    "\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034" +
    "\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb" +
    "\043\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb\051" +
    "\uffbb\052\uffbb\053\uffbb\054\uffbb\001\002\000\026\005\uffc6" +
    "\007\uffc6\011\uffc6\013\uffc6\014\uffc6\015\uffc6\017\uffc6\021" +
    "\uffc6\055\uffc6\056\uffc6\001\002\000\010\016\uffd5\021\uffd5" +
    "\056\uffd5\001\002\000\026\005\uffc2\007\uffc2\011\uffc2\013" +
    "\uffc2\014\uffc2\015\uffc2\017\uffc2\021\uffc2\055\uffc2\056\uffc2" +
    "\001\002\000\004\051\242\001\002\000\026\005\uffc0\007" +
    "\uffc0\011\uffc0\013\uffc0\014\uffc0\015\uffc0\017\uffc0\021\uffc0" +
    "\055\uffc0\056\uffc0\001\002\000\024\012\uffae\021\uffae\022" +
    "\uffae\023\uffae\024\uffae\025\uffae\027\130\046\uff9d\051\uffae" +
    "\001\002\000\004\051\206\001\002\000\024\005\uffcc\011" +
    "\uffcc\013\uffcc\014\uffcc\015\uffcc\017\uffcc\021\uffcc\055\uffcc" +
    "\056\uffcc\001\002\000\004\046\203\001\002\000\024\005" +
    "\uffca\011\uffca\013\uffca\014\uffca\015\uffca\017\uffca\021\uffca" +
    "\055\uffca\056\uffca\001\002\000\004\051\125\001\002\000" +
    "\024\005\uffcd\011\uffcd\013\uffcd\014\uffcd\015\uffcd\017\uffcd" +
    "\021\uffcd\055\uffcd\056\uffcd\001\002\000\026\005\uffc1\007" +
    "\uffc1\011\uffc1\013\uffc1\014\uffc1\015\uffc1\017\uffc1\021\uffc1" +
    "\055\uffc1\056\uffc1\001\002\000\024\005\uffc7\011\uffc7\013" +
    "\uffc7\014\uffc7\015\uffc7\017\uffc7\021\uffc7\055\uffc7\056\uffc7" +
    "\001\002\000\026\005\uffc4\007\uffc4\011\uffc4\013\uffc4\014" +
    "\uffc4\015\uffc4\017\uffc4\021\uffc4\055\uffc4\056\uffc4\001\002" +
    "\000\024\005\uffcb\011\uffcb\013\uffcb\014\uffcb\015\uffcb\017" +
    "\uffcb\021\uffcb\055\uffcb\056\uffcb\001\002\000\026\005\uffc3" +
    "\007\uffc3\011\uffc3\013\uffc3\014\uffc3\015\uffc3\017\uffc3\021" +
    "\uffc3\055\uffc3\056\uffc3\001\002\000\022\012\uffae\021\uffae" +
    "\022\uffae\023\uffae\024\uffae\025\uffae\027\130\051\uffae\001" +
    "\002\000\020\012\137\021\103\022\141\023\146\024\136" +
    "\025\142\051\145\001\002\000\006\047\131\052\uff99\001" +
    "\002\000\020\012\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf" +
    "\025\uffaf\051\uffaf\001\002\000\004\022\135\001\002\000" +
    "\004\052\133\001\002\000\004\046\134\001\002\000\026" +
    "\005\uff9b\007\uff9b\011\uff9b\013\uff9b\014\uff9b\015\uff9b\017" +
    "\uff9b\021\uff9b\055\uff9b\056\uff9b\001\002\000\004\052\uff9a" +
    "\001\002\000\044\026\uff90\027\uff90\030\uff90\031\uff90\032" +
    "\uff90\033\uff90\034\uff90\035\uff90\036\uff90\037\uff90\040\uff90" +
    "\041\uff90\042\uff90\046\uff90\047\uff90\052\uff90\054\uff90\001" +
    "\002\000\004\021\012\001\002\000\046\026\uff8a\027\uff8a" +
    "\030\uff8a\031\uff8a\032\uff8a\033\uff8a\034\uff8a\035\uff8a\036" +
    "\uff8a\037\uff8a\040\uff8a\041\uff8a\042\uff8a\046\uff8a\047\uff8a" +
    "\051\167\052\uff8a\054\uff8a\001\002\000\044\026\uff93\027" +
    "\uff93\030\uff93\031\uff93\032\uff93\033\uff93\034\uff93\035\uff93" +
    "\036\uff93\037\uff93\040\uff93\041\uff93\042\uff93\046\uff93\047" +
    "\uff93\052\uff93\054\uff93\001\002\000\044\026\uff91\027\uff91" +
    "\030\uff91\031\uff91\032\uff91\033\uff91\034\uff91\035\uff91\036" +
    "\uff91\037\uff91\040\uff91\041\uff91\042\uff91\046\uff91\047\uff91" +
    "\052\uff91\054\uff91\001\002\000\036\026\uffac\027\uffac\033" +
    "\uffac\034\uffac\035\uffac\036\uffac\037\uffac\040\uffac\041\uffac" +
    "\042\uffac\046\uffac\047\uffac\052\uffac\054\uffac\001\002\000" +
    "\044\026\uff96\027\uff96\030\uff96\031\uff96\032\uff96\033\uff96" +
    "\034\uff96\035\uff96\036\uff96\037\uff96\040\uff96\041\uff96\042" +
    "\uff96\046\uff96\047\uff96\052\uff96\054\uff96\001\002\000\022" +
    "\012\uffae\021\uffae\022\uffae\023\uffae\024\uffae\025\uffae\027" +
    "\130\051\uffae\001\002\000\044\026\uff92\027\uff92\030\uff92" +
    "\031\uff92\032\uff92\033\uff92\034\uff92\035\uff92\036\uff92\037" +
    "\uff92\040\uff92\041\uff92\042\uff92\046\uff92\047\uff92\052\uff92" +
    "\054\uff92\001\002\000\004\052\150\001\002\000\044\026" +
    "\uff8e\027\uff8e\030\uff8e\031\uff8e\032\uff8e\033\uff8e\034\uff8e" +
    "\035\uff8e\036\uff8e\037\uff8e\040\uff8e\041\uff8e\042\uff8e\046" +
    "\uff8e\047\uff8e\052\uff8e\054\uff8e\001\002\000\044\026\uff98" +
    "\027\uff98\030\153\031\155\032\152\033\uff98\034\uff98\035" +
    "\uff98\036\uff98\037\uff98\040\uff98\041\uff98\042\uff98\046\uff98" +
    "\047\uff98\052\uff98\054\uff98\001\002\000\020\012\uff7f\021" +
    "\uff7f\022\uff7f\023\uff7f\024\uff7f\025\uff7f\051\uff7f\001\002" +
    "\000\020\012\uff81\021\uff81\022\uff81\023\uff81\024\uff81\025" +
    "\uff81\051\uff81\001\002\000\044\026\uff97\027\uff97\030\uff97" +
    "\031\uff97\032\uff97\033\uff97\034\uff97\035\uff97\036\uff97\037" +
    "\uff97\040\uff97\041\uff97\042\uff97\046\uff97\047\uff97\052\uff97" +
    "\054\uff97\001\002\000\020\012\uff80\021\uff80\022\uff80\023" +
    "\uff80\024\uff80\025\uff80\051\uff80\001\002\000\020\012\137" +
    "\021\103\022\141\023\146\024\136\025\142\051\145\001" +
    "\002\000\044\026\uff95\027\uff95\030\uff95\031\uff95\032\uff95" +
    "\033\uff95\034\uff95\035\uff95\036\uff95\037\uff95\040\uff95\041" +
    "\uff95\042\uff95\046\uff95\047\uff95\052\uff95\054\uff95\001\002" +
    "\000\036\026\161\027\162\033\uffb0\034\uffb0\035\uffb0\036" +
    "\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\046\uffb0\047\uffb0" +
    "\052\uffb0\054\uffb0\001\002\000\020\012\uff83\021\uff83\022" +
    "\uff83\023\uff83\024\uff83\025\uff83\051\uff83\001\002\000\020" +
    "\012\uff82\021\uff82\022\uff82\023\uff82\024\uff82\025\uff82\051" +
    "\uff82\001\002\000\036\026\uffad\027\uffad\033\uffad\034\uffad" +
    "\035\uffad\036\uffad\037\uffad\040\uffad\041\uffad\042\uffad\046" +
    "\uffad\047\uffad\052\uffad\054\uffad\001\002\000\020\012\137" +
    "\021\103\022\141\023\146\024\136\025\142\051\145\001" +
    "\002\000\036\026\uffab\027\uffab\033\uffab\034\uffab\035\uffab" +
    "\036\uffab\037\uffab\040\uffab\041\uffab\042\uffab\046\uffab\047" +
    "\uffab\052\uffab\054\uffab\001\002\000\044\026\uff94\027\uff94" +
    "\030\uff94\031\uff94\032\uff94\033\uff94\034\uff94\035\uff94\036" +
    "\uff94\037\uff94\040\uff94\041\uff94\042\uff94\046\uff94\047\uff94" +
    "\052\uff94\054\uff94\001\002\000\024\012\uffae\021\uffae\022" +
    "\uffae\023\uffae\024\uffae\025\uffae\027\130\051\uffae\052\uffb3" +
    "\001\002\000\006\047\174\052\uffb4\001\002\000\004\052" +
    "\173\001\002\000\006\047\uffb1\052\uffb1\001\002\000\044" +
    "\026\uff8b\027\uff8b\030\uff8b\031\uff8b\032\uff8b\033\uff8b\034" +
    "\uff8b\035\uff8b\036\uff8b\037\uff8b\040\uff8b\041\uff8b\042\uff8b" +
    "\046\uff8b\047\uff8b\052\uff8b\054\uff8b\001\002\000\022\012" +
    "\uffae\021\uffae\022\uffae\023\uffae\024\uffae\025\uffae\027\130" +
    "\051\uffae\001\002\000\006\047\uffb2\052\uffb2\001\002\000" +
    "\046\026\uff8c\027\uff8c\030\uff8c\031\uff8c\032\uff8c\033\uff8c" +
    "\034\uff8c\035\uff8c\036\uff8c\037\uff8c\040\uff8c\041\uff8c\042" +
    "\uff8c\046\uff8c\047\uff8c\052\uff8c\053\200\054\uff8c\001\002" +
    "\000\044\026\uff8f\027\uff8f\030\uff8f\031\uff8f\032\uff8f\033" +
    "\uff8f\034\uff8f\035\uff8f\036\uff8f\037\uff8f\040\uff8f\041\uff8f" +
    "\042\uff8f\046\uff8f\047\uff8f\052\uff8f\054\uff8f\001\002\000" +
    "\022\012\uffae\021\uffae\022\uffae\023\uffae\024\uffae\025\uffae" +
    "\027\130\051\uffae\001\002\000\004\054\202\001\002\000" +
    "\044\026\uff8d\027\uff8d\030\uff8d\031\uff8d\032\uff8d\033\uff8d" +
    "\034\uff8d\035\uff8d\036\uff8d\037\uff8d\040\uff8d\041\uff8d\042" +
    "\uff8d\046\uff8d\047\uff8d\052\uff8d\054\uff8d\001\002\000\026" +
    "\005\uffa0\007\uffa0\011\uffa0\013\uffa0\014\uffa0\015\uffa0\017" +
    "\uffa0\021\uffa0\055\uffa0\056\uffa0\001\002\000\024\005\114" +
    "\011\112\013\116\014\102\015\111\017\107\021\103\055" +
    "\113\056\205\001\002\000\026\005\uffbf\007\uffbf\011\uffbf" +
    "\013\uffbf\014\uffbf\015\uffbf\017\uffbf\021\uffbf\055\uffbf\056" +
    "\uffbf\001\002\000\022\012\uffae\021\uffae\022\uffae\023\uffae" +
    "\024\uffae\025\uffae\027\130\051\uffae\001\002\000\010\041" +
    "\216\042\uffa9\052\uffa9\001\002\000\024\033\227\034\225" +
    "\035\234\036\233\037\232\040\235\041\uffa4\042\uffa4\052" +
    "\uffa4\001\002\000\010\041\uffa7\042\uffa7\052\uffa7\001\002" +
    "\000\006\042\214\052\213\001\002\000\022\005\114\011" +
    "\112\013\116\014\102\015\111\017\107\021\103\055\113" +
    "\001\002\000\022\012\uffae\021\uffae\022\uffae\023\uffae\024" +
    "\uffae\025\uffae\027\130\051\uffae\001\002\000\010\041\216" +
    "\042\uffaa\052\uffaa\001\002\000\022\012\uffae\021\uffae\022" +
    "\uffae\023\uffae\024\uffae\025\uffae\027\130\051\uffae\001\002" +
    "\000\010\041\uffa8\042\uffa8\052\uffa8\001\002\000\024\005" +
    "\uffc9\011\uffc9\013\uffc9\014\uffc9\015\uffc9\017\uffc9\021\uffc9" +
    "\055\uffc9\056\uffc9\001\002\000\026\005\uffcb\007\222\011" +
    "\uffcb\013\uffcb\014\uffcb\015\uffcb\017\uffcb\021\uffcb\055\uffcb" +
    "\056\uffcb\001\002\000\022\005\114\011\112\013\116\014" +
    "\102\015\111\017\107\021\103\055\113\001\002\000\024" +
    "\005\uffc8\011\uffc8\013\uffc8\014\uffc8\015\uffc8\017\uffc8\021" +
    "\uffc8\055\uffc8\056\uffc8\001\002\000\026\005\uffc5\007\uffc5" +
    "\011\uffc5\013\uffc5\014\uffc5\015\uffc5\017\uffc5\021\uffc5\055" +
    "\uffc5\056\uffc5\001\002\000\022\012\uff88\021\uff88\022\uff88" +
    "\023\uff88\024\uff88\025\uff88\027\uff88\051\uff88\001\002\000" +
    "\010\041\uffa6\042\uffa6\052\uffa6\001\002\000\022\012\uff89" +
    "\021\uff89\022\uff89\023\uff89\024\uff89\025\uff89\027\uff89\051" +
    "\uff89\001\002\000\010\041\uffa5\042\uffa5\052\uffa5\001\002" +
    "\000\022\012\uffae\021\uffae\022\uffae\023\uffae\024\uffae\025" +
    "\uffae\027\130\051\uffae\001\002\000\022\012\uff85\021\uff85" +
    "\022\uff85\023\uff85\024\uff85\025\uff85\027\uff85\051\uff85\001" +
    "\002\000\022\012\uff86\021\uff86\022\uff86\023\uff86\024\uff86" +
    "\025\uff86\027\uff86\051\uff86\001\002\000\022\012\uff87\021" +
    "\uff87\022\uff87\023\uff87\024\uff87\025\uff87\027\uff87\051\uff87" +
    "\001\002\000\022\012\uff84\021\uff84\022\uff84\023\uff84\024" +
    "\uff84\025\uff84\027\uff84\051\uff84\001\002\000\010\041\uffa3" +
    "\042\uffa3\052\uffa3\001\002\000\004\046\241\001\002\000" +
    "\004\046\uff9e\001\002\000\026\005\uff9f\007\uff9f\011\uff9f" +
    "\013\uff9f\014\uff9f\015\uff9f\017\uff9f\021\uff9f\055\uff9f\056" +
    "\uff9f\001\002\000\022\012\uffae\021\uffae\022\uffae\023\uffae" +
    "\024\uffae\025\uffae\027\130\051\uffae\001\002\000\006\042" +
    "\214\052\244\001\002\000\022\005\114\011\112\013\116" +
    "\014\102\015\111\017\107\021\103\055\113\001\002\000" +
    "\024\005\uffa1\011\uffa1\013\uffa1\014\uffa1\015\uffa1\017\uffa1" +
    "\021\uffa1\055\uffa1\056\uffa1\001\002\000\026\005\uffa2\007" +
    "\uffa2\011\uffa2\013\uffa2\014\uffa2\015\uffa2\017\uffa2\021\uffa2" +
    "\055\uffa2\056\uffa2\001\002\000\060\026\uffbd\027\uffbd\030" +
    "\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd" +
    "\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045" +
    "\uffbd\046\uffbd\047\uffbd\050\252\051\uffbd\052\uffbd\053\251" +
    "\054\uffbd\001\002\000\060\026\uffbc\027\uffbc\030\uffbc\031" +
    "\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc" +
    "\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\046" +
    "\uffbc\047\uffbc\050\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc" +
    "\001\002\000\022\012\uffae\021\uffae\022\uffae\023\uffae\024" +
    "\uffae\025\uffae\027\130\051\uffae\001\002\000\004\021\253" +
    "\001\002\000\060\026\uffba\027\uffba\030\uffba\031\uffba\032" +
    "\uffba\033\uffba\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba" +
    "\041\uffba\042\uffba\043\uffba\044\uffba\045\uffba\046\uffba\047" +
    "\uffba\050\uffba\051\uffba\052\uffba\053\uffba\054\uffba\001\002" +
    "\000\004\054\255\001\002\000\060\026\uffb9\027\uffb9\030" +
    "\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9" +
    "\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9\045" +
    "\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9" +
    "\054\uffb9\001\002\000\004\021\103\001\002\000\004\052" +
    "\260\001\002\000\004\046\261\001\002\000\026\005\uff9c" +
    "\007\uff9c\011\uff9c\013\uff9c\014\uff9c\015\uff9c\017\uff9c\021" +
    "\uff9c\055\uff9c\056\uff9c\001\002\000\004\046\272\001\002" +
    "\000\022\012\uffae\021\uffae\022\uffae\023\uffae\024\uffae\025" +
    "\uffae\027\130\051\uffae\001\002\000\004\046\uffb7\001\002" +
    "\000\004\046\uffb6\001\002\000\024\012\uffae\021\uffae\022" +
    "\uffae\023\uffae\024\uffae\025\uffae\027\130\051\uffae\052\uffb3" +
    "\001\002\000\004\052\270\001\002\000\004\046\uffb5\001" +
    "\002\000\004\046\uffb8\001\002\000\026\005\uffbe\007\uffbe" +
    "\011\uffbe\013\uffbe\014\uffbe\015\uffbe\017\uffbe\021\uffbe\055" +
    "\uffbe\056\uffbe\001\002\000\010\047\uffe2\052\uffe2\053\276" +
    "\001\002\000\012\021\uffe3\046\uffe3\047\uffe3\052\uffe3\001" +
    "\002\000\006\047\uffce\052\uffce\001\002\000\004\054\277" +
    "\001\002\000\012\021\uffe1\046\uffe1\047\uffe1\052\uffe1\001" +
    "\002\000\010\016\062\021\012\056\301\001\002\000\004" +
    "\002\001\001\002\000\010\021\303\046\uffe5\047\uffe5\001" +
    "\002\000\012\021\uffe2\046\uffe2\047\uffe2\053\276\001\002" +
    "\000\010\021\uffe4\046\uffe4\047\uffe4\001\002\000\006\046" +
    "\uffe6\047\uffe6\001\002\000\006\046\310\047\307\001\002" +
    "\000\004\021\303\001\002\000\014\006\uffe8\010\uffe8\021" +
    "\uffe8\055\uffe8\056\uffe8\001\002\000\006\046\uffe7\047\uffe7" +
    "\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\310\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\006\001\001\000\014\004\014" +
    "\006\015\012\007\014\013\022\012\001\001\000\004\016" +
    "\301\001\001\000\004\027\277\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\106\036\001\001\000\004\012\020" +
    "\001\001\000\004\010\021\001\001\000\006\007\032\010" +
    "\031\001\001\000\002\001\001\000\004\011\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\023\040\024\042" +
    "\001\001\000\002\001\001\000\004\012\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\107\045\001\001" +
    "\000\004\013\046\001\001\000\010\012\007\014\050\110" +
    "\047\001\001\000\006\025\053\026\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\056\030\060" +
    "\031\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\111\065\001\001\000\012\012\066\032" +
    "\067\033\070\034\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\012" +
    "\066\034\073\001\001\000\002\001\001\000\004\013\075" +
    "\001\001\000\006\012\007\014\050\001\001\000\004\035" +
    "\077\001\001\000\030\036\116\037\122\040\114\041\103" +
    "\043\121\044\120\045\123\046\105\047\117\050\107\052" +
    "\100\001\001\000\004\055\261\001\001\000\002\001\001" +
    "\000\004\053\246\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\060\237\061\125\073\236\001\001\000\002\001" +
    "\001\000\004\035\203\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\060\126\061\125\001\001\000" +
    "\010\052\137\075\142\100\143\001\001\000\004\074\131" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\175\001\001\000\004\102" +
    "\165\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\062\157\001\001\000\004\076\150\001\001\000\006\060" +
    "\146\061\125\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\077\153\105\155\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\052\137\100\156\001\001\000\002\001" +
    "\001\000\006\063\162\104\163\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\052\137\075" +
    "\164\100\143\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\056\170\057\167\060\171\061\125\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\060\174\061\125\001\001\000\002\001" +
    "\001\000\004\101\176\001\001\000\002\001\001\000\006" +
    "\060\200\061\125\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\036\116\037\122\040\114" +
    "\041\103\043\121\044\120\045\123\046\105\047\117\050" +
    "\107\052\100\001\001\000\002\001\001\000\014\060\207" +
    "\061\125\064\211\065\206\066\210\001\001\000\002\001" +
    "\001\000\010\067\225\070\227\103\230\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\036\217\037\220\040" +
    "\114\041\103\043\121\044\120\045\123\046\105\047\117" +
    "\050\107\052\100\001\001\000\012\060\207\061\125\065" +
    "\214\066\210\001\001\000\002\001\001\000\010\060\207" +
    "\061\125\066\216\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\037\223\040\222\041\103" +
    "\043\121\044\120\045\123\046\105\047\117\050\107\052" +
    "\100\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\060\235\061\125\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\060\207\061\125\064\242\065\206\066" +
    "\210\001\001\000\002\001\001\000\026\037\245\040\244" +
    "\041\103\043\121\044\120\045\123\046\105\047\117\050" +
    "\107\052\100\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\054\247\001\001\000\002\001\001\000\006\060" +
    "\253\061\125\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\052\256\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\060\270\061\125\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\056\266\057\167" +
    "\060\171\061\125\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\017\274" +
    "\020\273\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\056\030\060" +
    "\031\062\001\001\000\002\001\001\000\006\015\305\016" +
    "\304\001\001\000\006\017\303\020\273\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\310\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;

    }



	boolean inClass = false,
			inMain = false,
			method = false,
			attrDef = false;
	
	// nivo A
	int globalVarCnt = 0,			//	definicije glob prom
		localVarCnt = 0,			//	definicije lokalnih prom u mainu
		globalConstCnt = 0,			//	definicije glob konstanti
		globalArrayCnt = 0;			// 	deklaracije glob nizova
		
	// nivo B
	int functionCnt = 0,			// definicije funkcija u glavnom programu
		blockCnt = 0,				//	blokovi naredbi
		callCnt = 0,				//	pozivi funkcija u main metodi
		formParCnt = 0;				//	deklaracije form argumenata funkcija
		
	// nivo C
	int nestedClassCnt = 0,			//	definicije unutr klasa
		nestedClassMethodCnt = 0,	//	definicije metoda unutr klasa
		nestedClassAttrCnt = 0;		//	deklaracije polja unutr klasa
	
	Logger log = Logger.getLogger(getClass()); 
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
    
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatal syntax error - ", cur_token);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("Syntax error", cur_token);
    }
    
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" at row ").append(((Symbol)info).left);
        log.error(msg.toString());
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {
  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Mulop ::= MOD 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",67, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Mulop ::= DIV 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",67, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Mulop ::= MUL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",67, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Addop ::= MINUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",66, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Addop ::= PLUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",66, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Relop ::= LEQ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",65, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Relop ::= LESS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",65, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Relop ::= GREQ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",65, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Relop ::= GRE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",65, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Relop ::= NEQ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",65, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Relop ::= EQ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",65, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ParenActParsOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ParenActParsOpt",64, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ParenActParsOpt ::= LPAREN ActParsOpt RPAREN 
            {
              Object RESULT =null;
		 if (parser.inMain) parser.callCnt++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ParenActParsOpt",64, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // BracketsExprOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("BracketsExprOpt",63, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // BracketsExprOpt ::= LBRACKET Expr RBRACKET 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("BracketsExprOpt",63, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Factor ::= LPAREN Expr RPAREN 
            {
              Object RESULT =null;
		 if (parser.inMain) parser.callCnt++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",62, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Factor ::= NEW Type BracketsExprOpt 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",62, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Factor ::= BOOL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",62, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Factor ::= STRING 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",62, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Factor ::= CHAR 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",62, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Factor ::= NUMBER 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",62, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Factor ::= Designator ParenActParsOpt 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",62, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // MulopFactor ::= Mulop Factor 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopFactor",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // MulopFactorList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopFactorList",60, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // MulopFactorList ::= MulopFactorList MulopFactor 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopFactorList",60, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Term ::= Factor MulopFactorList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // NumberOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NumberOpt",58, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NumberOpt ::= COMMA NUMBER 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NumberOpt",58, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // PrintStatement ::= PRINT LPAREN Expr NumberOpt RPAREN SEMI_COMMA 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("PrintStatement",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ReadStatement ::= READ LPAREN Designator RPAREN SEMI_COMMA 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ReadStatement",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ExprOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprOpt",57, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ExprOpt ::= Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprOpt",57, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ReturnStatement ::= RETURN ExprOpt SEMI_COMMA 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ReturnStatement",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // BreakStatement ::= BREAK SEMI_COMMA 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("BreakStatement",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // UnmatchedWhileStatement ::= WHILE LPAREN Condition RPAREN Unmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("UnmatchedWhileStatement",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // MatchedWhileStatement ::= WHILE LPAREN Condition RPAREN Matched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MatchedWhileStatement",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // RelopExpr ::= Relop Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("RelopExpr",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // RelopExprOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("RelopExprOpt",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // RelopExprOpt ::= RelopExpr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("RelopExprOpt",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CondFact ::= Expr RelopExprOpt 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CondTerm ::= CondFact 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CondTerm ::= CondTerm AND CondFact 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Condition ::= CondTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Condition ::= Condition OR CondTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // AddopTerm ::= Addop Term 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopTerm",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // AddopTermList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopTermList",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // AddopTermList ::= AddopTermList AddopTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopTermList",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // MinusOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MinusOpt",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // MinusOpt ::= MINUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MinusOpt",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expr ::= MinusOpt Term AddopTermList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ActPars ::= Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ActPars ::= ActPars COMMA Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ActParsOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActParsOpt",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ActParsOpt ::= ActPars 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActParsOpt",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // AAA ::= LPAREN ActParsOpt RPAREN 
            {
              Object RESULT =null;
		 if (parser.inMain) parser.callCnt++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AAA",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // AAA ::= DEC 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AAA",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // AAA ::= INC 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AAA",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // AAA ::= EQUALS Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AAA",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DesignatorDecl ::= LBRACKET Expr RBRACKET 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorDecl",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DesignatorDecl ::= STOP IDENT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorDecl",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DesignatorList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorList",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DesignatorList ::= DesignatorList DesignatorDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorList",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Designator ::= IDENT DesignatorList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ExprStatement ::= Designator AAA SEMI_COMMA 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprStatement",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Matched ::= LBRACE StatementList RBRACE 
            {
              Object RESULT =null;
		 parser.blockCnt++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Matched ::= PrintStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Matched ::= ReadStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Matched ::= ReturnStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Matched ::= BreakStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Matched ::= MatchedWhileStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Matched ::= IF LPAREN Condition RPAREN Matched ELSE Matched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Matched ::= ExprStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Unmatched ::= UnmatchedWhileStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Unmatched ::= IF LPAREN Condition RPAREN Matched ELSE Unmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Unmatched ::= IF LPAREN Condition RPAREN Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Statement ::= Unmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Statement ::= Matched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // StatementList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FormPar ::= Type IDENT BracketsOpt 
            {
              Object RESULT =null;
		 parser.formParCnt++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPar",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FormPars ::= FormPar 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FormPars ::= FormPars COMMA FormPar 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FormParsOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParsOpt",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FormParsOpt ::= FormPars 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParsOpt",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ReturnType ::= VOID 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ReturnType",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ReturnType ::= Type 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ReturnType",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // MethodDecl ::= ReturnType IDENT LPAREN NT$3 FormParsOpt RPAREN VarDeclList LBRACE StatementList RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;
		 parser.method = false;
			   	  parser.blockCnt++;
			   	  // da li brojimo i main u funkcije
			   	  if (!parser.inClass) parser.functionCnt++;
			   	  else parser.nestedClassMethodCnt++;
			   	  if (parser.inMain) parser.inMain = false;
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$3 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
 parser.method = true; 
			   	  if (!parser.inClass && m.equals("main")) parser.inMain = true; 
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$3",71, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Methods ::= LBRACE MethodDeclList RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Methods",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // MethodsOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodsOpt",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // MethodsOpt ::= Methods 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodsOpt",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Extends ::= EXTENDS Type 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Extends",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ExtendsOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExtendsOpt",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ExtendsOpt ::= Extends 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExtendsOpt",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ClassDecl ::= CLASS NT$0 IDENT ExtendsOpt LBRACE NT$1 VarDeclList NT$2 MethodsOpt RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 
			  	parser.inClass = false; 
			  	parser.nestedClassCnt++;
			  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
 parser.attrDef = false; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$2",70, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
 parser.attrDef = true; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$1",69, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$0 ::= 
            {
              Object RESULT =null;
 parser.inClass = true; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$0",68, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Brackets ::= LBRACKET RBRACKET 
            {
              Object RESULT =null;
		 if (parser.inMain) parser.localVarCnt++;
			 	else if (!parser.method && !parser.inClass) parser.globalArrayCnt++; 
			 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Brackets",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // BracketsOpt ::= 
            {
              Object RESULT =null;
		 if (parser.inMain) parser.localVarCnt++;
				   else if (!parser.method && !parser.inClass) parser.globalVarCnt++; 
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("BracketsOpt",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // BracketsOpt ::= Brackets 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("BracketsOpt",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Variable ::= IDENT BracketsOpt 
            {
              Object RESULT =null;
		 if (parser.inClass && parser.attrDef) parser.nestedClassAttrCnt++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Variable",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VarList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarList",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VarList ::= Variable 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarList",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VarList ::= VarList COMMA Variable 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarList",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VarDecl ::= Type Variable VarList SEMI_COMMA 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Type ::= IDENT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Type",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ConstType ::= STRING 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstType",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ConstType ::= BOOL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstType",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ConstType ::= CHAR 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstType",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ConstType ::= NUMBER 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstType",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Constant ::= IDENT EQUALS ConstType 
            {
              Object RESULT =null;
		 parser.globalConstCnt++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Constant",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ConstList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstList",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ConstList ::= Constant 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstList",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ConstList ::= ConstList COMMA Constant 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstList",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ConstDecl ::= CONST Type Constant ConstList SEMI_COMMA 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // MethodDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // MethodDeclList ::= MethodDeclList MethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ClassDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDeclList",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ClassDeclList ::= ClassDeclList ClassDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDeclList",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VarDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VarDeclList ::= VarDeclList VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ConstDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDeclList",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ConstDeclList ::= ConstDeclList ConstDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDeclList",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // List ::= ClassDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("List",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // List ::= VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("List",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // List ::= ConstDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("List",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Lists ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Lists",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Lists ::= Lists List 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Lists",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= PROGRAM IDENT Lists LBRACE MethodDeclList RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

